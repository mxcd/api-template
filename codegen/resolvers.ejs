import { IResolvers } from '@graphql-tools/utils';
<% for(const model of models) { -%>
import {get<%= model.upperCamelCaseName %>, get<%= model.upperCamelCasePluralName %>, create<%= model.upperCamelCaseName %>, edit<%= model.upperCamelCaseName %>, delete<%= model.upperCamelCaseName %><% for(const relationField of model.relationFields) { %>, get<%= relationField.name.charAt(0).toUpperCase() + relationField.name.slice(1) %>For<%= model.upperCamelCaseName %><% } %>} from "./<%= model.upperCamelCaseName %>Controller";
<% } -%>

const resolvers: IResolvers = {
    Query: {
<% for(const model of models) { -%>
        <%= model.lowerCamelCaseName %>(parent, args, context, info) {
            return get<%= model.upperCamelCaseName %>(parent, args, context, info);
        },
        <%= model.lowerCamelCasePluralName %>(parent, args, context, info) {
            return get<%= model.upperCamelCasePluralName %>(parent, args, context, info);
        },
        create<%= model.upperCamelCaseName %>(parent, args, context, info) {
            return create<%= model.upperCamelCaseName %>(parent, args, context, info);
        },
        edit<%= model.upperCamelCaseName %>(parent, args, context, info) {
            return edit<%= model.upperCamelCaseName %>(parent, args, context, info);
        },
        delete<%= model.upperCamelCaseName %>(parent, args, context, info) {
            return delete<%= model.upperCamelCaseName %>(parent, args, context, info);
        },
<% } -%>
    },
<% for(const model of models) { -%>
<% if(model.relationFields.length !== 0) { %>
    <%= model.upperCamelCaseName %>: {
<% for(const relationField of model.relationFields) { -%>
        <%= relationField.name%>(parent, args, context, info) {
            return get<%= relationField.name.charAt(0).toUpperCase() + relationField.name.slice(1) %>For<%= model.upperCamelCaseName %>(parent, args, context, info);
        },
<% } -%>
    },
<% } -%>
<% } -%>
};

export default resolvers;
