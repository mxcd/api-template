import {prisma} from "../util";
import {ApolloError} from "apollo-server-errors";

export async function get<%= model.name %>(parent, args, context, info) {
    const id = args.id;
    const <%= model.name.toLowerCase() %> = await prisma.<%= model.name.toLowerCase() %>.findUnique({where: {id}});
    if(!<%= model.name.toLowerCase() %>) {
        throw new ApolloError(`No <%= model.name.toLowerCase() %> with ID '${id}' found`, "NOT_FOUND")
    }
    return <%= model.name.toLowerCase() %>;
}

export async function get<%= model.pluralName%>(parent, args, context, info) {
    const filter:any = args.filter;
    const search:string = args.search;
    const sort: any = args.sort;
    let where: any = {};

    if(filter) {
        where['AND'] = [];
<% for(const filterField of model.filterFields) { -%>
        if(filter.<%= filterField.name %>) where['AND'].push({<%= filterField.name %>: {<%= filterField.filterMode %>: filter.<%= filterField.name %>}});
<% } -%>
    }

    if(search) {
        where['OR'] = [
<% for(const searchField of model.searchFields) { -%>
            {<%= searchField.name %>: {<%= searchField.searchMode %>: search}},
<% } -%>
        ]
    }

    const limit: number = parseInt(args.limit) || 100
    const offset: number = parseInt(args.offset) || 0

    let orderBy: any = [];
    if(sort) {
        for(const key in sort) {
            let sort = {}
            sort[key] = args.sort[key].toLowerCase();
            orderBy.push(sort);
        }
    }

    const results = await prisma.$transaction([
        prisma.<%= model.name.toLowerCase() %>.count({where}),
        prisma.<%= model.name.toLowerCase() %>.findMany({
            where,
            orderBy,
            take: limit,
            skip: offset
        })
    ])
    const total = results[0];
    const <%= model.pluralName.toLowerCase() %> = results[1];

    return {
        total,
        <%= model.pluralName.toLowerCase() %>
    };
}

<% for(const relationField of model.relationFields) { %>
export async function get<%= relationField.name.charAt(0).toUpperCase() + relationField.name.slice(1) %>For<%= model.name %>(parent, args, context, info) {
    const id = parent.id;

    <%_ if(relationField.isArray) { %>
    const filter:any = args.filter;
    const search:string = args.search;
    const sort: any = args.sort;
    let where: any = {};

    if(filter) {
        where['AND'] = [];
        <%_ for(const filterField of relationField.model.filterFields) { -%>
        if(filter.<%= filterField.name %>) where['AND'].push({<%= filterField.name %>: {<%= filterField.filterMode %>: filter.<%= filterField.name %>}});
        <%_ } -%>
    }

    if(search) {
        where['OR'] = [
        <%_ for(const searchField of relationField.model.searchFields) { -%>
            {<%= searchField.name %>: {<%= searchField.searchMode %>: search}},
        <%_ } -%>
        ]
    }

    const limit: number = parseInt(args.limit) || 100
    const offset: number = parseInt(args.offset) || 0

    let orderBy: any = [];
    if(sort) {
        for(const key in sort) {
            let sort = {}
            sort[key] = args.sort[key].toLowerCase();
            orderBy.push(sort);
        }
    }

    const <%= model.name.toLowerCase() %> = await prisma.<%= model.name.toLowerCase() %>.findUnique({
        where: {id},
        include: {
            <%= relationField.name %>: { take: limit, skip: offset, where, orderBy}
    }});
    <%_ } else { -%>
    const <%= model.name.toLowerCase() %> = await prisma.<%= model.name.toLowerCase() %>.findUnique({where: {id}, include: {<%= relationField.name %>: true}})
    <%_ } -%>

    if(<%= model.name.toLowerCase() %> !== null) {
        return <%= model.name.toLowerCase() %>.<%= relationField.name %>;
    }
    else {
        <%_ if(relationField.isArray) { -%>
        return [];
        <%_ } else { -%>
        return null;
        <%_ } -%>
    }
}
<% } %>

export async function create<%= model.name %>(parent, args, context, info) {
    const data:any = {}
    <%_ for(const field of model.fields) { -%>
        <%_ if(field.name !== 'createdDate' && field.name !== 'modifiedDate' && field.name !== 'id') { -%>
            <%_ if(field.isModel) { -%>
                <%_ if(field.isArray) { -%>
    if('<%= field.name %>' in args.inputs) {
        data['<%= field.name %>'] = {};
        data['<%= field.name %>']['connect'] = args.inputs['<%= field.name %>'].map((e:number) => { return { id: e } });
    }
                <%_ } else { -%>
    if('<%= field.name %>' in args.inputs) {
        data['<%= field.name %>'] = {};
        data['<%= field.name %>']['connect'] = { id: args.inputs['<%= field.name %>'] };
    }
                <%_ } -%>
            <%_ } else { -%>
    if('<%= field.name %>' in args.inputs) data['<%= field.name %>'] = args.inputs['<%= field.name %>']
            <%_ } -%>
        <%_ } -%>
    <%_ } -%>

    const <%= model.name.toLowerCase() %> = await prisma.<%= model.name.toLowerCase() %>.create({data});
    return <%= model.name.toLowerCase() %>;
}

export async function edit<%= model.name %>(parent, args, context, info) {
    const id = args.id;
    const data:any = {}
    <%_ for(const field of model.fields) { -%>
        <%_ if(field.name !== 'createdDate' && field.name !== 'modifiedDate' && field.name !== 'id') { -%>
            <%_ if(field.isModel) { -%>
                <%_ if(field.isArray) { -%>
    if('<%= field.name %>' in args.inputs) {
        data['<%= field.name %>'] = {};
        data['<%= field.name %>']['set'] = args.inputs['<%= field.name %>'].map((e:number) => { return { id: e } });
    }
                <%_ } else { -%>
    if('<%= field.name %>' in args.inputs) {
        data['<%= field.name %>'] = {};
        data['<%= field.name %>']['set'] = { id: args.inputs['<%= field.name %>'] };
    }
                <%_ } -%>
            <%_ } else { -%>
    if('<%= field.name %>' in args.inputs) data['<%= field.name %>'] = args.inputs['<%= field.name %>']
            <%_ } -%>
        <%_ } -%>
    <%_ } -%>
    const <%= model.name.toLowerCase() %> = await prisma.<%= model.name.toLowerCase() %>.update({where: {id}, data});
    return <%= model.name.toLowerCase() %>;
}

export async function delete<%= model.name %>(parent, args, context, info) {
    const id = args.id;
    await prisma.<%= model.name.toLowerCase() %>.delete({where: {id}});
    return true;
}
