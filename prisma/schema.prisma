generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Starship {
  id                      Int      @default(autoincrement()) @id
  // @search @filter @sort
  name                    String
  // @search @filter @sort
  model                   String
  // @search @filter @sort
  starshipClass           String
  // @search @filter @sort
  manufacturer            String
  // @sort
  cost                    Int?
  // @sort
  length                  Float?
  // @filter(equals) @sort
  crew                    Int?
  // @filter(equals) @sort
  passengers              Int?
  // @sort
  maxAtmospheringSpeed    Int?
  // @sort
  hyperdriveRating        Float?
  // @sort
  mglt                    Float?
  // @sort
  cargoCapacity           Int?
  // @sort
  consumables             String
  createdDate             DateTime @default(now())
  modifiedDate            DateTime @default(now())
  films                   Film[]
  pilots                  Person[]
}

model Person {
  id           Int      @default(autoincrement()) @id
  // @search @filter
  name         String
  // @sort
  height       Int?
  // @sort
  mass         Int?
  hairColor    String
  skinColor    String
  eyeColor     String
  birthYear    String
  // @filter(equals)
  gender       String
  createdDate  DateTime @default(now())
  modifiedDate DateTime @default(now())
  homeworldId  Int?
  homeworld    Planet?  @relation("PersonPlanet", references: [id], fields: [homeworldId])
  films        Film[]
  species      Species[]
  starships    Starship[]
  vehicles     Vehicle[]
}

model Film {
  id           Int      @default(autoincrement()) @id
  // @search @filter
  title        String
  episodeId    Int
  openingCrawl String
  director     String
  producer     String
  // @sort
  releaseDate  String
  createdDate  DateTime @default(now())
  modifiedDate DateTime @default(now())
  species      Species[]
  starships    Starship[]
  vehicles     Vehicle[]
  characters   Person[]
  planets      Planet[]
}

model Vehicle {
  id                      Int      @default(autoincrement()) @id
  // @search @filter
  name                    String
  // @search @filter @sort
  model                   String
  // @search @filter @sort
  vehicleClass            String
  // @search @filter @sort
  manufacturer            String
  // @sort
  length                  Float?
  // @sort
  cost                    Int?
  // @filter(equals) @sort
  crew                    Int?
  // @filter(equals) @sort
  passengers              Int?
  // @sort
  maxAtmospheringSpeed    Int?
  // @sort
  cargoCapacity           Int?
  // @sort
  consumables             String
  createdDate             DateTime @default(now())
  modifiedDate            DateTime @default(now())
  films                   Film[]
  pilots                  Person[]
}

model Species {
  id               Int      @default(autoincrement()) @id
  // @search @filter
  name             String
  // @search @filter
  classification   String
  // @search @filter
  designation      String
  // @sort
  averageHeight    Float?
  // @sort
  averageLifespan  Float?
  hairColors       String
  skinColors       String
  eyeColors        String
  language         String
  createdDate      DateTime @default(now())
  modifiedDate     DateTime @default(now())
  homeworldId      Int?
  homeworld        Planet?  @relation("SpeciesPlanet", references: [id], fields: [homeworldId])
  films            Film[]
  people           Person[]
}

model Planet {
  id               Int       @default(autoincrement()) @id
  // @search @filter
  name             String
  // @sort
  diameter         Int?
  // @sort
  rotationPeriod   Float?
  // @sort
  orbitalPeriod    Float?
  // @sort
  gravity          Float?
  // @sort
  population       Int?
  climate          String
  terrain          String
  // @sort
  surfaceWater     Float?
  createdDate      DateTime  @default(now())
  modifiedDate     DateTime  @default(now())
  films            Film[]
  species          Species[] @relation(name: "SpeciesPlanet")
  residents        Person[]  @relation(name: "PersonPlanet")
}
